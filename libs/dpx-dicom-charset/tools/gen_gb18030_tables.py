# Copyright, 2023 Devyatnikov Alexei <oss@stingx.ru>
#
# ## License:
# MIT OR Apache-2.0 License
#
# ## Purpose:
# Generates GB18030 pointer-to-unicode and range-to-unicode tables from
# https://encoding.spec.whatwg.org TXT source files for `dpx-dicom-charset` rust
# crate.
#
# ## Running:
#
# python3 gen_gb18030_tables.py
#
# See on-screen information on output files location.
#
# ## Description:
# Script takes no parameters. It always sources required data from
# https://encoding.spec.whatwg.org and caches in in
# "<root>/target/gb18030_tables_temp". Test files are written in "test_files"
# subfolder.
#
# In case of internet archive is unavailable for some reason, you can can
# manually put files with names "gb18030.txt" and "gb18030_ranges.txt"
# to a cached downloads folder "<root>/target/gb18030_tables_temp/web".
#
# There are two files produces: "index.rs" and "ranges.rs" in
# "<root>/target/gb18030_tables_temp". These files are supposed to be manually
# copied to "<root>/libs/dpx-dicom-charset/src/tables/multi_byte/chinese"
# folder.
#
# Note: Generated tables are not GB18030 exclusive, they are also used for GBK
# and GB2312 codecs.

from datetime import date
from pathlib import Path
from urllib.request import urlretrieve
import os
import platform
import sys
import codecs

TAB = "    "

# cSpell:ignore getlogin


def write_static_list(f, vis, name, element_type, element_list, max_elements_on_line=12):
    line_list = []
    elements_on_line = []
    elements_count = 0
    for element in element_list:
        elements_on_line.append(element)
        elements_count += 1
        if len(elements_on_line) == max_elements_on_line:
            line_string = TAB + ', '.join(elements_on_line) + ','
            elements_on_line.clear()
            line_list.append(line_string)
    if len(elements_on_line) > 0:
        line_string = TAB + ', '.join(elements_on_line) + ','
        line_list.append(line_string)

    f.write("{}static {}: [{}; {}] = [\n{}\n];\n".format(
        vis, name, element_type, elements_count, '\n'.join(line_list)))


def read_index(file_name):
    file = open(file_name, 'rb')
    prev_index = -1
    for line in file:
        line = line.strip()
        if line.startswith(b'#') or len(line) == 0:
            continue
        index, code = line.split(b'\t', 3)[:2]
        index = int(index)
        assert (index == prev_index + 1)
        prev_index = index
        yield int(code, 16)


def read_ranges(file_name):
    file = open(file_name, 'rb')
    for line in file:
        line = line.strip()
        if line.startswith(b'#') or len(line) == 0:
            continue
        index, code = line.split(b'\t', 2)
        yield (int(index), int(code, 16))


def write_index(file_name, index):
    def gen_text(index):
        for i in index:
            yield '0x{:>04x}'.format(i)

    file = open(file_name, 'w')
    file.write("""\
#![cfg_attr(rustfmt, rustfmt_skip)]

// cSpell:{cspell}

// Do not edit! This file was autogenerated with `gen_gb18030_tables.py`
// utility on {date} by "{user}" on "{host}".

/// GB18030 index to unicode\n""".format(
        date=date.today(), user=os.getlogin(), host=platform.node(), cspell="disable"))

    write_static_list(file, 'pub ', 'GB18030_INDEX', 'u16', gen_text(index))


def write_ranges(file_name, index):
    def gen_text(index):
        for i in index:
            yield '(0x{:>05x}, 0x{:>05x})'.format(i[0], i[1])

    file = open(file_name, 'w')
    file.write("""\
#![cfg_attr(rustfmt, rustfmt_skip)]

// cSpell:{cspell}

// Do not edit! This file was autogenerated with `gen_gb18030_tables.py`
// utility on {date} by "{user}" on "{host}".

/// GB18030 unicode ranges\n""".format(
        date=date.today(), user=os.getlogin(), host=platform.node(), cspell="disable"))

    write_static_list(file, 'pub ', 'GB18030_RANGES',
                      '(u32, u32)', gen_text(index), 4)


def test_gb2312(f, index):
    f.write("# CL, GL, CR, GR(outside 94x94) = invalid\n")
    for c in [0x00, 0x01, 0x1F, 0x20, 0x21, 0x7E, 0x7F, 0x80, 0x9F, 0xA0, 0xFF]:
        f.write("0x{:>02X}\t0x{:>04X}\n".format(c, 0xFFFD))
    f.write("# GR (94x94) = (sub-range of GB18030)\n")
    for c in range(0, 94 * 94, 53):
        c1 = c // 94 + 0xa1
        c2 = c % 94 + 0xa1
        # whatwg algo:
        pointer = (c1 - 0x81) * 190 + c2 - 0x41
        f.write("0x{:>02x}{:>02x}\t0x{:>04x}\n".format(c1, c2, index[pointer]))


def test_gb18030(f, index):
    encoder = codecs.getencoder('gb18030')
    lines = []
    f.write("# Encoded range 0x00..=0xFF\n")
    for c in range(0x00, 0x100):
        b = encoder(chr(c))[0]
        f.write("0x{}\t0x{:>04x}\n".format(b.hex(), c))
    f.write("# Some code points \n")
    # 53 - prime number to select different parts of the table
    for i in range(0, len(index), 53):
        wc = index[i]
        b = encoder(chr(wc))[0]
        f.write("0x{}\t0x{:>04x}\n".format(b.hex(), wc))


if __name__ == "__main__":
    temp_dir = os.path.join(
        Path(__file__).parents[3], "target", "gb18030_tables_temp")
    web_dir = os.path.join(temp_dir, "web")
    if not os.path.exists(web_dir):
        os.makedirs(web_dir)
    index_file = os.path.join(web_dir, "gb18030.txt")
    if not os.path.exists(index_file):
        print("Downloading index file...", file=sys.stderr)
        urlretrieve(
            "https://encoding.spec.whatwg.org/index-gb18030.txt", index_file)
    ranges_file = os.path.join(web_dir, "gb18030_ranges.txt")
    if not os.path.exists(ranges_file):
        print("Downloading ranges file...", file=sys.stderr)
        urlretrieve(
            "https://encoding.spec.whatwg.org/index-gb18030-ranges.txt", ranges_file)

    target_index_file = os.path.join(temp_dir, "index.rs")
    target_ranges_file = os.path.join(temp_dir, "ranges.rs")

    print("Writing index file...", file=sys.stderr)
    index = [x for x in read_index(index_file)]
    write_index(target_index_file, index)

    print("Writing ranges file...", file=sys.stderr)
    write_ranges(target_ranges_file, read_ranges(ranges_file))

    print("Generating test files...", file=sys.stderr)
    test_dir = os.path.join(temp_dir, 'test_files')
    if not os.path.exists(test_dir):
        os.mkdir(test_dir)
    gb2312_file = os.path.join(test_dir, "gb2312.txt")
    f = open(gb2312_file, "w")
    test_gb2312(f, index)

    gb18030_file = os.path.join(test_dir, "gb18030.txt")
    f = open(gb18030_file, "w")
    test_gb18030(f, index)

    print("Done:\n  Index file: {}\n  Ranges file: {}\n".format(
        target_index_file, target_ranges_file), file=sys.stderr)

    # temp_file = os.path.
