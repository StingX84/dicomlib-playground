#![cfg_attr(rustfmt, rustfmt_skip)]
//! Tables and function for `ISO_IR_144`

use crate::tables::{BackwardResult, ForwardResult};
// cSpell:disable

// Do not edit! This file was autogenerated with `gen_single_byte_tables.py`
// utility on 2023-02-06 by "stingx" on "DESKTOP-2IQN19A".

/// Code Table ISO/IEC 8859-5 Cyrillic (`G1` in `ISO_IR 144`)
static ISO_IR_144: [u16; 96] = [
    0x00A0, 0x0401, 0x0402, 0x0403, 0x0404, 0x0405, 0x0406, 0x0407,
    0x0408, 0x0409, 0x040A, 0x040B, 0x040C, 0x00AD, 0x040E, 0x040F,
    0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
    0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
    0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
    0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
    0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
    0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
    0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
    0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F,
    0x2116, 0x0451, 0x0452, 0x0453, 0x0454, 0x0455, 0x0456, 0x0457,
    0x0458, 0x0459, 0x045A, 0x045B, 0x045C, 0x00A7, 0x045E, 0x045F,
];

/// Conversion single-byte -> unicode for `ISO_IR_144`
pub fn forward_g1_iso_ir_144(input: &[u8]) -> ForwardResult {
    let c = input[0];
    match c {
        // CL, GL
        ..=0x7F => (1, None),
        // CR
        0x80..=0x9F => (1, Some(c as u32)),
        // GR
        _ => match ISO_IR_144[(c - 0xA0) as usize] {
            0xFFFD => (1, None),
            c => (1, Some(c as u32)),
        },
    }
}

/// Conversion unicode -> single-byte for `ISO_IR_144`
pub fn backward_g1_iso_ir_144(output: &mut [u8], code: u32) -> BackwardResult {
    match code {
        // CL, GL, Invalid
        ..=0x7F | 0xFFFD | 0x10000.. => None,
        // CR
        0x80..=0x9F => {
            output[0] = code as u8;
            Some(1)
        },
        // GR
        _ => ISO_IR_144.iter()
            .position(|&c| c as u32 == code)
            .map(|index| {
                output[0] = (index + 0xA0) as u8;
                1
            }),
    }
}
